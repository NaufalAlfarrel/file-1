# Linear Interpolation
# ---------------------------------------------------------------------------------------------
from scipy.interpolate import interp1d
from scipy.interpolate import CubicSpline
import numpy as np
import matplotlib.pyplot as plt
plt.style.use('seaborn-poster')

# ---------------------------------------------------------------------------------------------
# interpolasi
x = [0,1,2,3,4,5]
y = [1,3,3,5,2,2]
# ----------------------------------------------------------------------------------------------

f = interp1d(x,y)

x_lin = np.linspace(0,5,100)
y_lin = f(x_lin)

y_ask = f(3.1)
print(y_ask)
""" outputnya 4.699999999999999 """
# ---------------------------------------------------------------------------------------------
plt.plot(x,y,'ob')
plt.plot(x_lin, y_lin, 'b')
plt.plot(3.1,f(3.1),'ro')
plt.show()
""" outputnya grafik """
# ---------------------------------------------------------------------------------------------



# Newton Interpolation
# ---------------------------------------------------------------------------------------------
import numpy as np
import matplotlib.pyplot as plt

plt.style.use('seaborn-poster')

%matplotlib inline
def divided_diff(x,y):
  n = len(y)
  coef = np.zeros([n,n])
  coef[:,0] = y

  for j in range(1,n):
    for i in range(n-j):
      coef[i][j] = \
      (coef[i+1][j-1] - coef[i][j-1]) / (x[i+j]-x[i])

  return coef

def newton_poly(coef, x_data, x):
  n = len(x_data) - 1
  p = coef[n]
  for k in range(1, n + 1):
    p = coef[n-k] + (x - x_data[n-k])*p
  return p
# ---------------------------------------------------------------------------------------------
x = np.array([-5, -1, 0, 2])
y = np.array([-2, 6, 1, 3])

a_s = divided_diff(x,y)[0,:]

x_new = np.arange(-5, 2.1, .1)
y_new = newton_poly(a_s, x, x_new)

plt.figure(figsize = (12, 8))
plt.plot(x, y, 'bo')
plt.plot(x_new, x_new, 'go')
plt.plot(x_new, y_new)
""" outputnya grafik """
# ---------------------------------------------------------------------------------------------



# Cubic Splane Interpolation
# ---------------------------------------------------------------------------------------------
x = [0,1,2,3,4,5]
y = [1,3,3,5,2,2]

f = CubicSpline(x,y,bc_type='natural')

x_cube = np.linspace(0,5,100)
y_cube = f(x_cube)

y_ask = f(2.9)
print(y_ask)
""" outputnya 5.000368421052631 """
# ---------------------------------------------------------------------------------------------
plt.plot(x,y,'bo')
plt.plot(x_cube, y_cube, 'b')
plt.plot(2.9, f(2.9),'ro')
plt.show()
""" outputnya grafik """
# ---------------------------------------------------------------------------------------------

""" Quiz singkat dan cepat

Olympiade tahun 1990, juara lomba sprint 100 m adalah ben Johnson. Catatan larinya ketika 0 detik kecepatannya adalag 10m/dtk. Pada saat 5 meter Kecepatannya adalah 15m/dtk. pada saat 10m kecepatannya adalah 20m/dtk.

Berapa kecepatan larinya saat pada jarak 7.2m?
Jawablag menggunakan coding pyhton
linier interpolation di bawah """


# Using Linear Interpolation
# ---------------------------------------------------------------------------------------------
from scipy.interpolate import interp1d
from scipy.interpolate import CubicSpline
import numpy as np
import matplotlib.pyplot as plt
plt.style.use('seaborn-poster')
# ---------------------------------------------------------------------------------------------
x = [0,5,10]
y = [10,15,20]
# ---------------------------------------------------------------------------------------------
f = interp1d(x,y)

x_lin = np.linspace(0,10,100)
y_lin = f(x_lin)

y_ask = f(7.2)
print(y_ask)
""" outputnya 17.2 """
# ---------------------------------------------------------------------------------------------
plt.plot(x,y,'ob')
plt.plot(x_lin, y_lin, 'b')
plt.plot(7.2,f(7.2),'ro')
plt.show()
""" outputnya grafik """
# ---------------------------------------------------------------------------------------------



# Using Newton Interpolation
# ---------------------------------------------------------------------------------------------
import numpy as np
import matplotlib.pyplot as plt

plt.style.use('seaborn-poster')

%matplotlib inline
def divided_diff(x,y):
  n = len(y)
  coef = np.zeros([n,n])
  coef[:,0] = y

  for j in range(1,n):
    for i in range(n-j):
      coef[i][j] = \
      (coef[i+1][j-1] - coef[i][j-1]) / (x[i+j]-x[i])

  return coef

def newton_poly(coef, x_data, x):
  n = len(x_data) - 1
  p = coef[n]
  for k in range(1, n + 1):
    p = coef[n-k] + (x - x_data[n-k])*p
  return p
# ---------------------------------------------------------------------------------------------
x = np.array([0,5,10])
y = np.array([10,15,20])

a_s = divided_diff(x,y)[0,:]

x_new = np.arange(-5, 2.1, .1)
y_new = newton_poly(a_s, x, x_new)

plt.figure(figsize = (12, 8))
plt.plot(x, y, 'bo')
plt.plot(x_new, x_new, 'go')
plt.plot(x_new, y_new)
""" outputnya grafik """
# ---------------------------------------------------------------------------------------------



# Using Cubic Spalen Interpolation
# ---------------------------------------------------------------------------------------------
x = [0, 5, 10]
y = [10, 15, 20]

f = CubicSpline(x,y,bc_type='natural')

x_cube = np.linspace(0,10,100)
y_cube = f(x_cube)

y_ask = f(7.2)
print(y_ask)
""" outputnya 17.2 """
# ---------------------------------------------------------------------------------------------
plt.plot(x,y,'bo')
plt.plot(x_cube, y_cube, 'b')
plt.plot(7.2, f(7.2),'ro')
plt.show()
""" outputnya grafik """
# ---------------------------------------------------------------------------------------------

# import numpy as np
# from scipy.interpolate import interp1d
# import matplotlib.pyplot as plt

# x = [0, 5, 10]
# y = [10, 15, 20]

# f = interp1d(x, y)

# x_lin = np.linspace(0, 10, 100)
# y_lin = f(x_lin)

# y_ask = f(7.2)
# print('Kecepatan pada jarak 7.2m:', y_ask, 'm/dtk')

# plt.plot(x, y, 'o', label='Data Asli')
# plt.plot(x_lin, y_lin, '-', label='Interpolasi Linear')
# plt.plot(7.2, y_ask, 'ro', label='Kecepatan pada 7.2m')
# plt.xlabel('Jarak (m)')
# plt.ylabel('Kecepatan (m/dtk)')
# plt.title('Linear Interpolation untuk Kecepatan Larinya')
# plt.legend()
# plt.grid()
# plt.show()
